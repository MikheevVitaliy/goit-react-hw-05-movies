{"version":3,"file":"static/js/168.a6e32166.chunk.js","mappings":"+NACA,EAAmC,kCAAnC,EAAqF,+BAArF,EAAqI,gCAArI,EAAqL,+B,mBCErL,EAAgCA,EAAQ,MAAhCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAEVC,EAAcH,EAAQ,MAAtBG,UAoCR,EAlCgB,WACd,IAAQC,EAAYD,IAAZC,QACR,EAA8BH,EAAS,IAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAcA,OAVAJ,GAAU,WAAM,wCAGd,oGAC6BK,EAAAA,EAAAA,kBAAsBH,GADnD,OACQI,EADR,OAGEF,EAAWE,GAHb,4CAHc,0DACdC,EAOD,GAAE,CAACL,KAGF,8BACGC,EAAQK,OAAS,GAChB,eAAIC,UAAWC,EAAf,SACGP,EAAQQ,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,gBAAaL,UAAWC,EAAxB,WACE,gBAAID,UAAWC,EAAf,qBAA4CG,MAC5C,cAAGJ,UAAWC,EAAd,SAAkCI,MAF3BF,EADE,OAQf,qEAIP,C,wDCrCKG,E,QAAcC,EAAAA,OAAa,CAC/BC,QAAS,gCACTC,OAAQ,CAENC,QAAS,mCACTC,SAAU,W,aAKd,O,oBAAA,sGACyBL,EAAYM,IAAI,sBADzC,UACQC,EADR,QAGQC,EAAiBD,EAASE,KAAKC,SAEjBjB,OALtB,sBAMU,IAAIkB,MAAJ,+BANV,gCASSH,GATT,kE,aAaA,O,oBAAA,WAA8BX,GAA9B,yFACyBG,EAAYM,IAAZ,gBAAyBT,IADlD,uBACUY,EADV,EACUA,KADV,kBAGSA,GAHT,kE,aAOA,O,oBAAA,WAAiCG,GAAjC,yFACyBZ,EAAYM,IAAZ,6BAAsCM,IAD/D,UACQL,EADR,QAGQM,EAAeN,EAASE,KAAKC,SAEjBjB,OALpB,sBAMU,IAAIkB,MAAJ,4EANV,gCAWSE,GAXT,kE,aAeA,O,oBAAA,WAAiChB,GAAjC,yFACyBG,EAAYM,IAAZ,gBAAyBT,EAAzB,aADzB,UACQU,EADR,QAGQO,EAAOP,EAASE,KAAKK,MAEjBrB,OALZ,sBAMU,IAAIkB,MAAJ,qBANV,gCASSG,GATT,kE,aAaA,O,oBAAA,WAAiCjB,GAAjC,yFACyBG,EAAYM,IAAZ,gBAAyBT,EAAzB,aADzB,cACQU,EADR,OAGQnB,EAAUmB,EAASE,KAAKC,QAHhC,kBAKStB,GALT,kEASA,IAAM2B,EAAM,CACVC,oB,WA1DaA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA2DbC,eA3DF,SAa8B,GAAfA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA+CbC,kBA/CF,SAOiC,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAyCbC,kBAzCF,SAeiC,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA2BbC,kBA3BF,SAaiC,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,GAiBf,K","sources":["webpack://react-homework-template/./src/components/Reviews/Reviews.module.css?7248","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"reviews__section\":\"Reviews_reviews__section__PbEbr\",\"reviews__list\":\"Reviews_reviews__list__FL7NX\",\"reviews__title\":\"Reviews_reviews__title__+XJ8d\",\"reviews__text\":\"Reviews_reviews__text__Y-Cmq\"};","import css from './Reviews.module.css';\nimport API from '../../services/api';\n// import { useState, useEffect } from 'react';\nconst { useState, useEffect } = require('react');\n// import { useParams } from 'react-router-dom';\nconst { useParams } = require('react-router-dom');\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  /* useEffect() Выполняет функфию \"getMovieReviews\" при каждом обновлении компонента. Функция запрашивает отзывы о фильме с API при помощи метода\n  \"fetchMovieReviews\" импортирован с API. Полученные отзывы сохраняются в хуке setReviews(). */\n  useEffect(() => {\n    getMovieReviews();\n\n    async function getMovieReviews() {\n      const fetchReviews = await API.fetchMovieReviews(movieId);\n      // console.log(fetchReviews);\n      setReviews(fetchReviews);\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews.length > 0 ? (\n        <ul className={css.reviews__section}>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id} className={css.reviews__list}>\n              <h4 className={css.reviews__title}>Author: {author}</h4>\n              <p className={css.reviews__text}>{content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n// Параметры для запроса на бэкенд\nconst apiInstance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    // api_Key: 'b0e0648964ab116875dee356a1ceb23b',\n    api_key: 'b0e0648964ab116875dee356a1ceb23b',\n    language: 'en-US',\n  },\n});\n\n// Фукция получает список актуальных фильмов за сутки с TMDb и возращает их объектом\nasync function fetchTrendingMovies() {\n  const response = await apiInstance.get('trending/movie/day');\n\n  const trendingMovies = response.data.results;\n\n  if (!trendingMovies.length) {\n    throw new Error(`Sorry, there are no movies.`);\n  }\n\n  return trendingMovies;\n}\n\n//Функция получает подробности фильма по его id и возращает их объектом\nasync function fetchMovieById(id) {\n  const { data } = await apiInstance.get(`movie/${id}`);\n\n  return data;\n}\n\n//Функция для поиска фильмов по слову и возращает масив объктов\nasync function fetchSearchMovies(query) {\n  const response = await apiInstance.get(`search/movie?query=${query}`);\n\n  const searchMovies = response.data.results;\n\n  if (!searchMovies.length) {\n    throw new Error(\n      `Sorry, there are no movies matching your search query. Please try again.`\n    );\n  }\n\n  return searchMovies;\n}\n\n// Функция получает каст фильма по id и возращает масив объектов\nasync function fetchMovieCredits(id) {\n  const response = await apiInstance.get(`movie/${id}/credits`);\n\n  const cast = response.data.cast;\n\n  if (!cast.length) {\n    throw new Error(`Not found cast...`);\n  }\n\n  return cast;\n}\n\n// Функция получает рецензии фильма по id и возращает масив объектов\nasync function fetchMovieReviews(id) {\n  const response = await apiInstance.get(`movie/${id}/reviews`);\n\n  const reviews = response.data.results;\n\n  return reviews;\n}\n\n//Объект с функциями, для обращения к API\nconst api = {\n  fetchTrendingMovies,\n  fetchMovieById,\n  fetchSearchMovies,\n  fetchMovieCredits,\n  fetchMovieReviews,\n};\n\nexport default api;\n"],"names":["require","useState","useEffect","useParams","movieId","reviews","setReviews","API","fetchReviews","getMovieReviews","length","className","css","map","id","author","content","apiInstance","axios","baseURL","params","api_key","language","get","response","trendingMovies","data","results","Error","query","searchMovies","cast","api","fetchTrendingMovies","fetchMovieById","fetchSearchMovies","fetchMovieCredits","fetchMovieReviews"],"sourceRoot":""}