{"version":3,"file":"static/js/936.ffbb5d38.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MoviesItem/MoviesItem.module.css?58c2","components/MoviesItem/MoviesItem.jsx","constants/constants.js","webpack://react-homework-template/./src/pages/Home/Home.module.css?1370","pages/Home/Home.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"moviesCard__section\":\"MoviesItem_moviesCard__section__f4ICH\",\"moviesCard__link\":\"MoviesItem_moviesCard__link__o0OWp\",\"moviesCard__img\":\"MoviesItem_moviesCard__img__gerAc\",\"moviesCard__info\":\"MoviesItem_moviesCard__info__9t+TG\",\"moviesCard__info_title\":\"MoviesItem_moviesCard__info_title__klCcO\",\"moviesCard__info_text\":\"MoviesItem_moviesCard__info_text__znEYC\"};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport css from './MoviesItem.module.css';\n\nexport const MoviesItem = ({ id, title, imagePath, vote }) => {\n  const { pathname, search } = useLocation();\n  const fromPage = `${pathname}${search}`;\n\n  return (\n    <li className={css.moviesCard__section}>\n      <Link\n        className={css.moviesCard__link}\n        to={`/movies/${id}`}\n        state={{ from: fromPage }}\n      >\n        <img className={css.moviesCard__img} src={imagePath} alt={title} />\n        <div className={css.moviesCard__info}>\n          <h4 className={css.moviesCard__info_title}>{title}</h4>\n          <p className={css.moviesCard__info_text}>{vote}</p>\n        </div>\n      </Link>\n    </li>\n  );\n};\n\nMoviesItem.propTypes = {\n  imagePath: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  vote: PropTypes.string.isRequired,\n};\n","export const BASE_IMAGE_URL = `https://image.tmdb.org/t/p/w500`;\nexport const PlACEHOLDER_IMAGE_URL = `https://via.placeholder.com/100x150`;\nexport const PlACEHOLDER_POSTER_URL = `https://placehold.jp/200x300.png`;","// extracted by mini-css-extract-plugin\nexport default {\"nameMovies\":\"Home_nameMovies__pojce\",\"moviesList\":\"Home_moviesList__cVzy4\"};","import { useState, useEffect } from 'react';\nimport API from '../../services/api';\nimport { Loader } from 'components/Loader/Loader';\nimport { BASE_IMAGE_URL, PlACEHOLDER_IMAGE_URL } from 'constants/constants';\nimport { MoviesItem } from 'components/MoviesItem/MoviesItem';\n\nimport css from './Home.module.css';\n\nconst Home = () => {\n  /* Создание состояния для списка популярных фильмов и индикатор загрузки */\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  /* 'useEffect' для получения популярных фильмов при загрузке страници */\n  useEffect(\n    () => {\n      // Показ индикатора загрузки\n      setIsLoading(true);\n\n      // Получает список популярных фильмов\n      getTrendingMovies();\n\n      async function getTrendingMovies() {\n        try {\n          const fetchMovies = await API.fetchTrendingMovies();\n\n          // Обновляем хук со списком фильмов\n          setTrendingMovies(fetchMovies);\n        } catch (error) {\n          // Выводим ошибки обращения к API\n          console.log(error);\n        } finally {\n          // Убираем индикатор загрузки\n          setIsLoading(false);\n        }\n      }\n    },\n\n    // Пустой массив зависимостей для запуска хука при обновлении страници\n    []\n  );\n\n  return (\n    <main>\n      <h2 className={css.nameMovies}>Trending today</h2>\n\n      {isLoading && <Loader />}\n\n      <ul className={css.moviesList}>\n        {trendingMovies.map(({ id, title, poster_path, vote_average }) => (\n          <MoviesItem\n            key={id}\n            id={id}\n            title={title}\n            imagePath={\n              poster_path ? BASE_IMAGE_URL + poster_path : PlACEHOLDER_IMAGE_URL\n            }\n            vote={vote_average ? vote_average.toFixed(1) : 'No Vote'}\n          />\n        ))}\n      </ul>\n    </main>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n// Параметры для запроса на бэкенд\nconst apiInstance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    // api_Key: 'b0e0648964ab116875dee356a1ceb23b',\n    api_key: 'b0e0648964ab116875dee356a1ceb23b',\n    language: 'en-US',\n  },\n});\n\n// Фукция получает список актуальных фильмов за сутки с TMDb и возращает их объектом\nasync function fetchTrendingMovies() {\n  const response = await apiInstance.get('trending/movie/day');\n\n  const trendingMovies = response.data.results;\n\n  if (!trendingMovies.length) {\n    throw new Error(`Sorry, there are no movies.`);\n  }\n\n  return trendingMovies;\n}\n\n//Функция получает подробности фильма по его id и возращает их объектом\nasync function fetchMovieById(id) {\n  const { data } = await apiInstance.get(`movie/${id}`);\n\n  return data;\n}\n\n//Функция для поиска фильмов по слову и возращает масив объктов\nasync function fetchSearchMovies(query) {\n  const response = await apiInstance.get(`search/movie?query=${query}`);\n\n  const searchMovies = response.data.results;\n\n  if (!searchMovies.length) {\n    throw new Error(\n      `Sorry, there are no movies matching your search query. Please try again.`\n    );\n  }\n\n  return searchMovies;\n}\n\n// Функция получает каст фильма по id и возращает масив объектов\nasync function fetchMovieCredits(id) {\n  const response = await apiInstance.get(`movie/${id}/credits`);\n\n  const cast = response.data.cast;\n\n  if (!cast.length) {\n    throw new Error(`Not found cast...`);\n  }\n\n  return cast;\n}\n\n// Функция получает рецензии фильма по id и возращает масив объектов\nasync function fetchMovieReviews(id) {\n  const response = await apiInstance.get(`movie/${id}/reviews`);\n\n  const reviews = response.data.results;\n\n  return reviews;\n}\n\n//Объект с функциями, для обращения к API\nconst api = {\n  fetchTrendingMovies,\n  fetchMovieById,\n  fetchSearchMovies,\n  fetchMovieCredits,\n  fetchMovieReviews,\n};\n\nexport default api;\n"],"names":["MoviesItem","id","title","imagePath","vote","useLocation","pathname","search","fromPage","className","css","Link","to","state","from","src","alt","BASE_IMAGE_URL","PlACEHOLDER_IMAGE_URL","PlACEHOLDER_POSTER_URL","useState","trendingMovies","setTrendingMovies","isLoading","setIsLoading","useEffect","API","fetchMovies","console","log","getTrendingMovies","Loader","map","poster_path","vote_average","toFixed","apiInstance","axios","baseURL","params","api_key","language","get","response","data","results","length","Error","query","searchMovies","cast","reviews","api","fetchTrendingMovies","fetchMovieById","fetchSearchMovies","fetchMovieCredits","fetchMovieReviews"],"sourceRoot":""}