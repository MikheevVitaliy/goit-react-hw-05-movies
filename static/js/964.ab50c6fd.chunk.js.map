{"version":3,"file":"static/js/964.ab50c6fd.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MoviesItem/MoviesItem.module.css?58c2","components/MoviesItem/MoviesItem.jsx","constants/constants.js","webpack://react-homework-template/./src/components/SearchForm/SearchForm.module.css?d6f1","components/SearchForm/SearchForm.jsx","webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"moviesCard__section\":\"MoviesItem_moviesCard__section__f4ICH\",\"moviesCard__link\":\"MoviesItem_moviesCard__link__o0OWp\",\"moviesCard__img\":\"MoviesItem_moviesCard__img__gerAc\",\"moviesCard__info\":\"MoviesItem_moviesCard__info__9t+TG\",\"moviesCard__info_title\":\"MoviesItem_moviesCard__info_title__klCcO\",\"moviesCard__info_text\":\"MoviesItem_moviesCard__info_text__znEYC\"};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport css from './MoviesItem.module.css';\n\nexport const MoviesItem = ({ id, title, imagePath, vote }) => {\n  const { pathname, search } = useLocation();\n  const fromPage = `${pathname}${search}`;\n\n  return (\n    <li className={css.moviesCard__section}>\n      <Link\n        className={css.moviesCard__link}\n        to={`/movies/${id}`}\n        state={{ from: fromPage }}\n      >\n        <img className={css.moviesCard__img} src={imagePath} alt={title} />\n        <div className={css.moviesCard__info}>\n          <h4 className={css.moviesCard__info_title}>{title}</h4>\n          <p className={css.moviesCard__info_text}>{vote}</p>\n        </div>\n      </Link>\n    </li>\n  );\n};\n\nMoviesItem.propTypes = {\n  imagePath: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  vote: PropTypes.string.isRequired,\n};\n","export const BASE_IMAGE_URL = `https://image.tmdb.org/t/p/w500`;\nexport const PlACEHOLDER_IMAGE_URL = `https://via.placeholder.com/100x150`;\nexport const PlACEHOLDER_POSTER_URL = `https://placehold.jp/200x300.png`;","// extracted by mini-css-extract-plugin\nexport default {\"search__section\":\"SearchForm_search__section__epMt7\",\"search__form\":\"SearchForm_search__form__jrxBg\",\"search__input\":\"SearchForm_search__input__w7BzV\",\"search__button\":\"SearchForm_search__button__ufdDR\"};","import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { BiSearch } from 'react-icons/bi';\n\nimport css from './SearchForm.module.css';\n\nimport PropTypes from 'prop-types';\n\nexport const SearchForm = ({ onSubmit, onChange }) => {\n  const [query, setQuery] = useState('');\n\n  /* 'handleQueryChange' вызывается при изменении значения в поле ввода и обновляет 'setQuery', и передает измененное значение в родительский элемент через 'onChange' */\n  const handleQueryChange = evt => {\n    setQuery(evt.currentTarget.value.toLowerCase());\n    onChange(evt.currentTarget.value.toLowerCase());\n  };\n\n  /* 'handleSubmit' блокирует обновление страници и проверяет, чтоб поле ввода было не пустое, после чего передает значение запроса в родительский компонент при помощи 'onSubmit'.*/\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (query.trim() === '') {\n      return toast.warn('Enter your query in the search bar!');\n    }\n\n    onSubmit(query);\n    setQuery('');\n  };\n  return (\n    <div className={css.search__section}>\n      <form className={css.search__form} onSubmit={handleSubmit}>\n        <input\n          className={css.search__input}\n          type=\"text\"\n          name=\"query\"\n          value={query}\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          onChange={handleQueryChange}\n        />\n\n        <button className={css.search__button} type=\"submit\">\n          <BiSearch size={23} />\n        </button>\n      </form>\n    </div>\n  );\n};\n\nSearchForm.propsType = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"movies__list\":\"Movies_movies__list__+pxmY\"};","import API from '../../services/api';\nimport { Loader } from 'components/Loader/Loader';\nimport { MoviesItem } from 'components/MoviesItem/MoviesItem';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { BASE_IMAGE_URL, PlACEHOLDER_IMAGE_URL } from 'constants/constants';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport css from './Movies.module.css';\n\n// Компонент фильмов\nconst Movies = () => {\n  // Хуки для фиксации состояния\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [query, setQuery] = useState(searchParams.get('search') ?? '');\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // 'useEffect', для получения списка фильмов при обновлении 'search query'\n  useEffect(() => {\n    if (!query) {\n      // Если query пустая строка, значит запрос к API не делаем\n      return;\n    }\n    setIsLoading(true);\n    getSearchMovies();\n\n    async function getSearchMovies() {\n      try {\n        // Запрос к API с введенной 'search query'\n        const fetchMovies = await API.fetchSearchMovies(query);\n\n        // Обновление списков фильмов\n        setMovies(fetchMovies);\n      } catch (error) {\n        console.log(error);\n        // Сообщение, что по запросу фильмов не найдено\n        toast.error(\n          'Sorry, there are no movies matching your search query. Please try again.'\n        );\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  }, [query]);\n\n  // Обработка действия для подачи формы поиска\n  const handleFormSubmit = query => {\n    // console.log(query);\n\n    // Обновляем 'search query' и список фильмов\n    setQuery(query);\n    setMovies([]);\n  };\n\n  // Обновляем 'search query' в адресной строке браузера\n  const updateQueryString = value => {\n    setSearchParams(value !== '' ? { search: value } : {});\n  };\n\n  return (\n    <main>\n      <SearchForm onSubmit={handleFormSubmit} onChange={updateQueryString} />\n\n      {isLoading && <Loader />}\n\n      <ul className={css.movies__list}>\n        {movies.map(({ id, title, poster_path, vote_average }) => (\n          <MoviesItem\n            key={id}\n            id={id}\n            title={title}\n            imagePath={\n              poster_path ? BASE_IMAGE_URL + poster_path : PlACEHOLDER_IMAGE_URL\n            }\n            vote={vote_average ? vote_average.toFixed(1) : 'No vote'}\n          />\n        ))}\n      </ul>\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n// Параметры для запроса на бэкенд\nconst apiInstance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    // api_Key: 'b0e0648964ab116875dee356a1ceb23b',\n    api_key: 'b0e0648964ab116875dee356a1ceb23b',\n    language: 'en-US',\n  },\n});\n\n// Фукция получает список актуальных фильмов за сутки с TMDb и возращает их объектом\nasync function fetchTrendingMovies() {\n  const response = await apiInstance.get('trending/movie/day');\n\n  const trendingMovies = response.data.results;\n\n  if (!trendingMovies.length) {\n    throw new Error(`Sorry, there are no movies.`);\n  }\n\n  return trendingMovies;\n}\n\n//Функция получает подробности фильма по его id и возращает их объектом\nasync function fetchMovieById(id) {\n  const { data } = await apiInstance.get(`movie/${id}`);\n\n  return data;\n}\n\n//Функция для поиска фильмов по слову и возращает масив объктов\nasync function fetchSearchMovies(query) {\n  const response = await apiInstance.get(`search/movie?query=${query}`);\n\n  const searchMovies = response.data.results;\n\n  if (!searchMovies.length) {\n    throw new Error(\n      `Sorry, there are no movies matching your search query. Please try again.`\n    );\n  }\n\n  return searchMovies;\n}\n\n// Функция получает каст фильма по id и возращает масив объектов\nasync function fetchMovieCredits(id) {\n  const response = await apiInstance.get(`movie/${id}/credits`);\n\n  const cast = response.data.cast;\n\n  if (!cast.length) {\n    throw new Error(`Not found cast...`);\n  }\n\n  return cast;\n}\n\n// Функция получает рецензии фильма по id и возращает масив объектов\nasync function fetchMovieReviews(id) {\n  const response = await apiInstance.get(`movie/${id}/reviews`);\n\n  const reviews = response.data.results;\n\n  return reviews;\n}\n\n//Объект с функциями, для обращения к API\nconst api = {\n  fetchTrendingMovies,\n  fetchMovieById,\n  fetchSearchMovies,\n  fetchMovieCredits,\n  fetchMovieReviews,\n};\n\nexport default api;\n"],"names":["MoviesItem","id","title","imagePath","vote","useLocation","pathname","search","fromPage","className","css","Link","to","state","from","src","alt","BASE_IMAGE_URL","PlACEHOLDER_IMAGE_URL","PlACEHOLDER_POSTER_URL","SearchForm","onSubmit","onChange","useState","query","setQuery","e","preventDefault","trim","toast","type","name","value","autoComplete","autoFocus","placeholder","evt","currentTarget","toLowerCase","size","propsType","PropTypes","useSearchParams","searchParams","setSearchParams","get","movies","setMovies","isLoading","setIsLoading","useEffect","API","fetchMovies","console","log","getSearchMovies","Loader","map","poster_path","vote_average","toFixed","apiInstance","axios","baseURL","params","api_key","language","response","trendingMovies","data","results","length","Error","searchMovies","cast","reviews","api","fetchTrendingMovies","fetchMovieById","fetchSearchMovies","fetchMovieCredits","fetchMovieReviews"],"sourceRoot":""}