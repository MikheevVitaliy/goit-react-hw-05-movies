{"version":3,"file":"static/js/262.99ed4339.chunk.js","mappings":"kPACA,EAAiC,iCAAjC,EAAkF,gCAAlF,EAAmI,iCAAnI,EAA0L,sC,SCG7KA,EAAW,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAC1C,OACE,gBAAIC,UAAWC,EAAf,WACE,gBACED,UAAWC,EACXC,IAAKL,EACLM,IAAKL,EACLM,MAAM,SAGR,iBAAKJ,UAAWC,EAAhB,WACE,wBAAKH,KACL,eAAGE,UAAWC,EAAd,yBACa,kBACVF,UAKV,E,oBCtBD,EAA6B,yBC0D7B,EA3Ca,WAEX,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAsBA,OAlBAC,EAAAA,EAAAA,YAAU,WAAM,wCAGd,+GAE4BC,EAAAA,EAAAA,kBAAsBN,GAFlD,OAEUO,EAFV,OAIUC,EACJD,EAAUE,OAAS,GAAKF,EAAUG,MAAM,EAAG,IAAMH,EAGnDH,EAAQI,GARZ,gDAUIG,QAAQC,IAAR,MAVJ,0DAHc,0DACdC,EAeD,GAAE,CAACb,IAECG,GAGH,eAAIR,UAAWC,EAAf,SACGO,EAAKW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAevB,EAApC,EAAoCA,UAApC,OACR,SAACH,EAAD,CAEEC,UACEwB,EAAeE,EAAAA,GAAiBF,EAAeG,EAAAA,GAEjD1B,KAAMwB,EACNvB,UAAWA,GALNqB,EAFC,MAJI,IAgBnB,C,wGCzDM,IAAMG,EAAc,kCACdC,EAAqB,sCACrBC,EAAsB,kC,wDCA7BC,E,QAAcC,EAAAA,OAAa,CAC/BC,QAAS,gCACTC,OAAQ,CAENC,QAAS,mCACTC,SAAU,W,aAKd,O,oBAAA,sGACyBL,EAAYM,IAAI,sBADzC,UACQC,EADR,QAGQC,EAAiBD,EAASE,KAAKC,SAEjBtB,OALtB,sBAMU,IAAIuB,MAAJ,+BANV,gCASSH,GATT,kE,aAaA,O,oBAAA,WAA8Bd,GAA9B,yFACyBM,EAAYM,IAAZ,gBAAyBZ,IADlD,uBACUe,EADV,EACUA,KADV,kBAGSA,GAHT,kE,aAOA,O,oBAAA,WAAiCG,GAAjC,yFACyBZ,EAAYM,IAAZ,6BAAsCM,IAD/D,UACQL,EADR,QAGQM,EAAeN,EAASE,KAAKC,SAEjBtB,OALpB,sBAMU,IAAIuB,MAAJ,4EANV,gCAWSE,GAXT,kE,aAeA,O,oBAAA,WAAiCnB,GAAjC,yFACyBM,EAAYM,IAAZ,gBAAyBZ,EAAzB,aADzB,UACQa,EADR,QAGQzB,EAAOyB,EAASE,KAAK3B,MAEjBM,OALZ,sBAMU,IAAIuB,MAAJ,qBANV,gCASS7B,GATT,kE,aAaA,O,oBAAA,WAAiCY,GAAjC,yFACyBM,EAAYM,IAAZ,gBAAyBZ,EAAzB,aADzB,cACQa,EADR,OAGQO,EAAUP,EAASE,KAAKC,QAHhC,kBAKSI,GALT,kEASA,IAAMC,EAAM,CACVC,oB,WA1DaA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA2DbC,eA3DF,SAa8B,GAAfA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA+CbC,kBA/CF,SAOiC,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAyCbC,kBAzCF,SAeiC,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA2BbC,kBA3BF,SAaiC,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,GAiBf,K","sources":["webpack://react-homework-template/./src/components/Cast/CastItem/CastItem.module.css?aa36","components/Cast/CastItem/CastItem.jsx","webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","constants/constants.js","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castItem__list\":\"CastItem_castItem__list__JNVQe\",\"castItem__img\":\"CastItem_castItem__img__RnyIP\",\"castItem__info\":\"CastItem_castItem__info__UXHae\",\"castItem__character\":\"CastItem_castItem__character__EjNPZ\"};","import PropTypes from 'prop-types';\n\nimport css from './CastItem.module.css';\n\nexport const CastItem = ({ imagePath, name, character }) => {\n  return (\n    <li className={css.castItem__list}>\n      <img\n        className={css.castItem__img}\n        src={imagePath}\n        alt={name}\n        width=\"100\"\n      />\n\n      <div className={css.castItem__info}>\n        <h4>{name}</h4>\n        <p className={css.castItem__character}>\n          Character: <br />\n          {character}\n        </p>\n      </div>\n    </li>\n  );\n};\n\nCastItem.propTypes = {\n  imagePath: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  character: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"cast__list\":\"Cast_cast__list__yNezN\"};","import API from '../../services/api';\nimport { useState, useEffect } from 'react';\nimport { CastItem } from './CastItem/CastItem';\n\nimport { useParams } from 'react-router-dom';\n// const { useParams } = require('react-router-dom');\n\nimport { BASE_IMAGE_URL, PlACEHOLDER_IMAGE_URL } from 'constants/constants';\n// const {\n//   BASE_IMAGE_URL,\n//   PlACEHOLDER_IMAGE_URL,\n// } = require('constants/constants');\n\nimport css from './Cast.module.css';\n\n// =============================?\nconst Cast = () => {\n  /*  \"movieId\" получает с URL-адреса при помощи хука \"useParams\" */\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  /* \"useEffect\" вызывает функцию \"getMovieCredits\" при изменении \"movieId\". Эта вункция получает список актеров с 'API' при помощи функции\n  \"fetchMovieCredits\", обрезает список до первых 16 актеров и обновляет хук \"cast\". */\n  useEffect(() => {\n    getMovieCredits();\n\n    async function getMovieCredits() {\n      try {\n        const fetchCast = await API.fetchMovieCredits(movieId);\n\n        const actors =\n          fetchCast.length > 16 ? fetchCast.slice(0, 16) : fetchCast;\n\n        // console.log(actors);\n        setCast(actors);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }, [movieId]);\n  /*  Проверка списка актеров на известность, если нет, то возвращаем 'null' */\n  if (!cast) return null;\n\n  return (\n    <ul className={css.cast__list}>\n      {cast.map(({ id, profile_path, original_name, character }) => (\n        <CastItem\n          key={id}\n          imagePath={\n            profile_path ? BASE_IMAGE_URL + profile_path : PlACEHOLDER_IMAGE_URL\n          }\n          name={original_name}\n          character={character}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default Cast;\n","export const BASE_IMAGE_URL = `https://image.tmdb.org/t/p/w500`;\nexport const PlACEHOLDER_IMAGE_URL = `https://via.placeholder.com/100x150`;\nexport const PlACEHOLDER_POSTER_URL = `https://placehold.jp/200x300.png`;","import axios from 'axios';\n// Параметры для запроса на бэкенд\nconst apiInstance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    // api_Key: 'b0e0648964ab116875dee356a1ceb23b',\n    api_key: 'b0e0648964ab116875dee356a1ceb23b',\n    language: 'en-US',\n  },\n});\n\n// Фукция получает список актуальных фильмов за сутки с TMDb и возращает их объектом\nasync function fetchTrendingMovies() {\n  const response = await apiInstance.get('trending/movie/day');\n\n  const trendingMovies = response.data.results;\n\n  if (!trendingMovies.length) {\n    throw new Error(`Sorry, there are no movies.`);\n  }\n\n  return trendingMovies;\n}\n\n//Функция получает подробности фильма по его id и возращает их объектом\nasync function fetchMovieById(id) {\n  const { data } = await apiInstance.get(`movie/${id}`);\n\n  return data;\n}\n\n//Функция для поиска фильмов по слову и возращает масив объктов\nasync function fetchSearchMovies(query) {\n  const response = await apiInstance.get(`search/movie?query=${query}`);\n\n  const searchMovies = response.data.results;\n\n  if (!searchMovies.length) {\n    throw new Error(\n      `Sorry, there are no movies matching your search query. Please try again.`\n    );\n  }\n\n  return searchMovies;\n}\n\n// Функция получает каст фильма по id и возращает масив объектов\nasync function fetchMovieCredits(id) {\n  const response = await apiInstance.get(`movie/${id}/credits`);\n\n  const cast = response.data.cast;\n\n  if (!cast.length) {\n    throw new Error(`Not found cast...`);\n  }\n\n  return cast;\n}\n\n// Функция получает рецензии фильма по id и возращает масив объектов\nasync function fetchMovieReviews(id) {\n  const response = await apiInstance.get(`movie/${id}/reviews`);\n\n  const reviews = response.data.results;\n\n  return reviews;\n}\n\n//Объект с функциями, для обращения к API\nconst api = {\n  fetchTrendingMovies,\n  fetchMovieById,\n  fetchSearchMovies,\n  fetchMovieCredits,\n  fetchMovieReviews,\n};\n\nexport default api;\n"],"names":["CastItem","imagePath","name","character","className","css","src","alt","width","movieId","useParams","useState","cast","setCast","useEffect","API","fetchCast","actors","length","slice","console","log","getMovieCredits","map","id","profile_path","original_name","BASE_IMAGE_URL","PlACEHOLDER_IMAGE_URL","PlACEHOLDER_POSTER_URL","apiInstance","axios","baseURL","params","api_key","language","get","response","trendingMovies","data","results","Error","query","searchMovies","reviews","api","fetchTrendingMovies","fetchMovieById","fetchSearchMovies","fetchMovieCredits","fetchMovieReviews"],"sourceRoot":""}