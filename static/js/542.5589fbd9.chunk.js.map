{"version":3,"file":"static/js/542.5589fbd9.chunk.js","mappings":"wNAAO,IAAMA,EAAc,kCACdC,EAAqB,sCACrBC,EAAsB,kC,iKCDnC,EAA6B,+B,SCKhBC,EAAa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAQ3B,OACE,UAAC,EAAAC,KAAD,CAAMC,UAAWC,EAAgBC,GAAI,IAArC,WAEE,SAAC,MAAD,CAAaC,KAAM,KAClBL,IAGN,E,UCpBD,EAAqC,yCAArC,EAA6F,mCAA7F,EAAgJ,oCAAhJ,EAAoM,oCAApM,EAAiQ,6CAAjQ,EAAmU,yCAAnU,EAAmY,2CAAnY,EAAkc,wCC6Glc,EAtGqB,WAEnB,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA6BC,EAAAA,EAAAA,MAArBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OACZC,EAAQ,UAAMF,GAAN,OAAiBC,GAkB/B,IAfAE,EAAAA,EAAAA,YAAU,WAAM,wCAGd,6GAE6BC,EAAAA,EAAAA,eAAmBC,OAAOX,IAFvD,OAEUY,EAFV,OAIIR,EAASQ,GAJb,gDAMIC,QAAQC,IAAR,MANJ,0DAHc,0DACdC,EAWD,GAAE,CAACf,KAGCG,EACH,OAAO,KAGT,IAAQa,EACNb,EADMa,YAAaC,EACnBd,EADmBc,MAAOC,EAC1Bf,EAD0Be,aAAcC,EACxChB,EADwCgB,SAAUC,EAClDjB,EADkDiB,OAAQC,EAC1DlB,EAD0DkB,aAItDC,EAAYN,EACd1B,EAAAA,GAAiB0B,EACjBxB,EAAAA,GAGE+B,EAAOF,EAAeA,EAAaG,MAAM,EAAG,GAAK,UAOvD,OACE,6BACE,SAAC/B,EAAD,uBAEA,iBAAKG,UAAWC,EAAhB,WACE,gBACED,UAAWC,EACX4B,IAAKH,EACLI,IAAKT,EACLU,MAAM,SAER,iBAAK/B,UAAWC,EAAhB,WACE,0BACGoB,GACD,gCAAQM,EAAR,WAEF,uCAnBCK,KAAKC,MAAqB,GAAfX,GAmBZ,QACA,sCACA,uBAAIC,KACJ,oCACA,eAAIvB,UAAWC,EAAf,gBACGuB,QADH,IACGA,OADH,EACGA,EAAQU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACX,wBAAcA,GAALD,EADE,aAOnB,iBAAKnC,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,oCACA,gBAAID,UAAWC,EAAf,WACE,yBACE,SAAC,EAAAoC,QAAD,CACErC,UAAWC,EACXC,GAAG,OACHoC,MAAO,CAAEC,KAAM3B,GAHjB,qBAQF,yBACE,SAAC,EAAAyB,QAAD,CACErC,UAAWC,EACXC,GAAG,UACHoC,MAAO,CAAEC,KAAM3B,GAHjB,8BAWN,SAAC,EAAA4B,SAAD,CAAUC,SAAU,KAApB,UACE,SAAC,KAAD,QAIP,C,wDC1GKC,E,QAAcC,EAAAA,OAAa,CAC/BC,QAAS,gCACTC,OAAQ,CAENC,QAAS,mCACTC,SAAU,W,aAKd,O,oBAAA,sGACyBL,EAAYM,IAAI,sBADzC,UACQC,EADR,QAGQC,EAAiBD,EAASE,KAAKC,SAEjBC,OALtB,sBAMU,IAAIC,MAAJ,+BANV,gCASSJ,GATT,kE,aAaA,O,oBAAA,WAA8Bf,GAA9B,yFACyBO,EAAYM,IAAZ,gBAAyBb,IADlD,uBACUgB,EADV,EACUA,KADV,kBAGSA,GAHT,kE,aAOA,O,oBAAA,WAAiCI,GAAjC,yFACyBb,EAAYM,IAAZ,6BAAsCO,IAD/D,UACQN,EADR,QAGQO,EAAeP,EAASE,KAAKC,SAEjBC,OALpB,sBAMU,IAAIC,MAAJ,4EANV,gCAWSE,GAXT,kE,aAeA,O,oBAAA,WAAiCrB,GAAjC,yFACyBO,EAAYM,IAAZ,gBAAyBb,EAAzB,aADzB,UACQc,EADR,QAGQQ,EAAOR,EAASE,KAAKM,MAEjBJ,OALZ,sBAMU,IAAIC,MAAJ,qBANV,gCASSG,GATT,kE,aAaA,O,oBAAA,WAAiCtB,GAAjC,yFACyBO,EAAYM,IAAZ,gBAAyBb,EAAzB,aADzB,cACQc,EADR,OAGQS,EAAUT,EAASE,KAAKC,QAHhC,kBAKSM,GALT,kEASA,IAAMC,EAAM,CACVC,oB,WA1DaA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA2DbC,eA3DF,SAa8B,GAAfA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA+CbC,kBA/CF,SAOiC,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAyCbC,kBAzCF,SAeiC,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA2BbC,kBA3BF,SAaiC,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,GAiBf,K","sources":["constants/constants.js","webpack://react-homework-template/./src/components/BackButton/BackButton.module.css?d3a5","components/BackButton/BackButton.jsx","webpack://react-homework-template/./src/pages/MovieDetails/MovieDetails.module.css?0c24","pages/MovieDetails/MovieDetails.jsx","services/api.js"],"sourcesContent":["export const BASE_IMAGE_URL = `https://image.tmdb.org/t/p/w500`;\nexport const PlACEHOLDER_IMAGE_URL = `https://via.placeholder.com/100x150`;\nexport const PlACEHOLDER_POSTER_URL = `https://placehold.jp/200x300.png`;","// extracted by mini-css-extract-plugin\nexport default {\"back__link\":\"BackButton_back__link__jnbhr\"};","import { Link } from 'react-router-dom';\n// import { Link, useLocation } from 'react-router-dom';\nimport { BsArrowLeft } from 'react-icons/bs';\n\nimport css from './BackButton.module.css';\n\nexport const BackButton = ({ children }) => {\n  /*  Функция 'useLocation()' получает текущий URL страници и сохраняет в переменной 'location'. Далее с оператором '?'\n     обращаемся до свойств 'state' с переменной 'location',\n      которая содержит информацию о предыдущей странице. Если такая информация есть, значит получаем URL предыдушей страници и сохраняем в переменную 'backLinkHref'. Если информации нет, то устанавливаем URL страници по умолчанию на (\"/\"). */\n\n  // const location = useLocation();\n  // const backLinkHref = location.state?.from ?? '/';\n\n  return (\n    <Link className={css.back__link} to={'/'}>\n      {/* <Link className={css.back__link} to={backLinkHref}> */}\n      <BsArrowLeft size={16} />\n      {children}\n    </Link>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"details__container\":\"MovieDetails_details__container__BwpdQ\",\"details__img\":\"MovieDetails_details__img__DphXp\",\"details__info\":\"MovieDetails_details__info__rYCEi\",\"details__card\":\"MovieDetails_details__card__OWNbO\",\"details__container_nav\":\"MovieDetails_details__container_nav__aOnWv\",\"details__nav_title\":\"MovieDetails_details__nav_title__qqFFR\",\"details__nav_section\":\"MovieDetails_details__nav_section__n8npK\",\"details__nav_link\":\"MovieDetails_details__nav_link__K2Dsg\",\"active\":\"MovieDetails_active__uPNdW\"};","import { Suspense, useState, useEffect } from 'react';\nimport { Outlet, useParams, useLocation, NavLink } from 'react-router-dom';\nimport API from '../../services/api';\nimport { BackButton } from 'components/BackButton/BackButton';\nimport { BASE_IMAGE_URL, PlACEHOLDER_POSTER_URL } from 'constants/constants';\n\nimport css from './MovieDetails.module.css';\n\nconst MovieDetails = () => {\n  // Хуки для получения 'movieId' и текущего пути роута\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState([]);\n  const { pathname, search } = useLocation();\n  const fromPage = `${pathname}${search}`;\n\n  // Хук 'useEffect' для получения данных о фильме с API\n  useEffect(() => {\n    getMovieById();\n\n    async function getMovieById() {\n      try {\n        const fetchMovie = await API.fetchMovieById(Number(movieId));\n        // console.log(fetchMovie);\n        setMovie(fetchMovie);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }, [movieId]);\n\n  // Если данные о фильме не загрузились, возвращаем 'null'\n  if (!movie) {\n    return null;\n  }\n  // Вытягимаем данные о фильме (деструктуризация)\n  const { poster_path, title, vote_average, overview, genres, release_date } =\n    movie;\n\n  // Формируем URL для изображения фильма\n  const imagePath = poster_path\n    ? BASE_IMAGE_URL + poster_path\n    : PlACEHOLDER_POSTER_URL;\n\n  // Вытягиваю год выхода фильма\n  const year = release_date ? release_date.slice(0, 4) : 'No year';\n\n  // Функция рейтинга фильма в процентах\n  const userScore = () => {\n    return Math.round(vote_average * 10);\n  };\n\n  return (\n    <main>\n      <BackButton>Go back</BackButton>\n\n      <div className={css.details__container}>\n        <img\n          className={css.details__img}\n          src={imagePath}\n          alt={title}\n          width=\"250\"\n        ></img>\n        <div className={css.details__info}>\n          <h2>\n            {title}\n            <span>({year})</span>\n          </h2>\n          <p>User Score {userScore()}%</p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h4>Genres</h4>\n          <ul className={css.details__card}>\n            {genres?.map(({ id, name }) => (\n              <li key={id}>{name}</li>\n            ))}\n          </ul>\n        </div>\n      </div>\n\n      <div className={css.details__container_nav}>\n        <h2 className={css.details__nav_title}>Additional infomation</h2>\n        <ul className={css.details__nav_section}>\n          <li>\n            <NavLink\n              className={css.details__nav_link}\n              to=\"cast\"\n              state={{ from: fromPage }}\n            >\n              Cast\n            </NavLink>\n          </li>\n          <li>\n            <NavLink\n              className={css.details__nav_link}\n              to=\"reviews\"\n              state={{ from: fromPage }}\n            >\n              Reviews\n            </NavLink>\n          </li>\n        </ul>\n      </div>\n\n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n// Параметры для запроса на бэкенд\nconst apiInstance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    // api_Key: 'b0e0648964ab116875dee356a1ceb23b',\n    api_key: 'b0e0648964ab116875dee356a1ceb23b',\n    language: 'en-US',\n  },\n});\n\n// Фукция получает список актуальных фильмов за сутки с TMDb и возращает их объектом\nasync function fetchTrendingMovies() {\n  const response = await apiInstance.get('trending/movie/day');\n\n  const trendingMovies = response.data.results;\n\n  if (!trendingMovies.length) {\n    throw new Error(`Sorry, there are no movies.`);\n  }\n\n  return trendingMovies;\n}\n\n//Функция получает подробности фильма по его id и возращает их объектом\nasync function fetchMovieById(id) {\n  const { data } = await apiInstance.get(`movie/${id}`);\n\n  return data;\n}\n\n//Функция для поиска фильмов по слову и возращает масив объктов\nasync function fetchSearchMovies(query) {\n  const response = await apiInstance.get(`search/movie?query=${query}`);\n\n  const searchMovies = response.data.results;\n\n  if (!searchMovies.length) {\n    throw new Error(\n      `Sorry, there are no movies matching your search query. Please try again.`\n    );\n  }\n\n  return searchMovies;\n}\n\n// Функция получает каст фильма по id и возращает масив объектов\nasync function fetchMovieCredits(id) {\n  const response = await apiInstance.get(`movie/${id}/credits`);\n\n  const cast = response.data.cast;\n\n  if (!cast.length) {\n    throw new Error(`Not found cast...`);\n  }\n\n  return cast;\n}\n\n// Функция получает рецензии фильма по id и возращает масив объектов\nasync function fetchMovieReviews(id) {\n  const response = await apiInstance.get(`movie/${id}/reviews`);\n\n  const reviews = response.data.results;\n\n  return reviews;\n}\n\n//Объект с функциями, для обращения к API\nconst api = {\n  fetchTrendingMovies,\n  fetchMovieById,\n  fetchSearchMovies,\n  fetchMovieCredits,\n  fetchMovieReviews,\n};\n\nexport default api;\n"],"names":["BASE_IMAGE_URL","PlACEHOLDER_IMAGE_URL","PlACEHOLDER_POSTER_URL","BackButton","children","Link","className","css","to","size","movieId","useParams","useState","movie","setMovie","useLocation","pathname","search","fromPage","useEffect","API","Number","fetchMovie","console","log","getMovieById","poster_path","title","vote_average","overview","genres","release_date","imagePath","year","slice","src","alt","width","Math","round","map","id","name","NavLink","state","from","Suspense","fallback","apiInstance","axios","baseURL","params","api_key","language","get","response","trendingMovies","data","results","length","Error","query","searchMovies","cast","reviews","api","fetchTrendingMovies","fetchMovieById","fetchSearchMovies","fetchMovieCredits","fetchMovieReviews"],"sourceRoot":""}